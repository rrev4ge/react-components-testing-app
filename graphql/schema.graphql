schema {
  query: TranslationDashboardQueries
  mutation: TranslationDashboardMutations
}

directive @authorize(
  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER

  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """
  Roles that are allowed to access the annotated resource.
  """
  roles: [String!]
) on FIELD_DEFINITION | OBJECT | SCHEMA

"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  Deferred when true.
  """
  if: Boolean

  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  Streamed when true.
  """
  if: Boolean

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String
) on FIELD

"""
Payload for adding user roles
"""
input AddUserRolesPayloadInput {
  """
  List of roles to add
  """
  roles: [OrganizationRole!]!
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
}

enum ApprovalStatus {
  APPROVED
  REJECTED
  UNDECIDED
}

input ApproveProposalInput {
  """
  Optional comment
  """
  comment: String

  """
  Organization level
  """
  level: OrganizationLevel!

  """
  Proposal ID
  """
  proposalId: UUID!

  """
  New status
  """
  status: ApprovalStatus!
}

type ApproveProposalPayload {
  proposalDto: ProposalDto
}

input ChangeUserEmailInput {
  """
  User email payload
  """
  payload: UpdateUserEmailPayloadInput!

  """
  User ID
  """
  userId: UUID!
}

type ChangeUserEmailPayload {
  userDto: UserDto
}

input ChangeUserNameInput {
  """
  User name payload
  """
  payload: UpdateUserNamePayloadInput!

  """
  User ID
  """
  userId: UUID!
}

type ChangeUserNamePayload {
  userDto: UserDto
}

input ChangeUserOrganizationInput {
  """
  User organization payload
  """
  payload: UpdateUserOrganizationPayloadInput!

  """
  User ID
  """
  userId: UUID!
}

type ChangeUserOrganizationPayload {
  userDto: UserDto
}

input ClearUserRolesInput {
  """
  User ID
  """
  userId: UUID!
}

type ClearUserRolesPayload {
  userDto: UserDto
}

"""
Information about the offset pagination.
"""
type CollectionSegmentInfo {
  """
  Indicates whether more items exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more items exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!
}

"""
Country DTO
"""
type CountryDto {
  """
  Country code
  """
  code: String!

  """
  Country name
  """
  name: String!
}

type CountryDtoCollectionSegment {
  items: [CountryDto!]

  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

"""
Countries filter
"""
input CountryFilterDtoInput {
  """
  Country code
  """
  code: String

  """
  Search query
  """
  query: String
}

"""
Country list sorting
"""
enum CountryListSorting {
  """
  Code
  """
  CODE

  """
  Name
  """
  NAME
}

input CreateProposalInput {
  """
  Source book id
  """
  bookId: Int!

  """
  Target book code
  """
  code: String!

  """
  Comment
  """
  comment: String

  """
  Target language code
  """
  language: String!

  """
  Organization ID to create proposal for
  """
  organizationId: String!

  """
  Proposal ID
  """
  proposalId: UUID!

  """
  Target book title
  """
  title: String!
}

type CreateProposalPayload {
  proposalDto: ProposalDto
}

input CreateUserInput {
  """
  User details
  """
  payload: CreateUserPayloadInput!

  """
  User ID
  """
  userId: UUID!
}

type CreateUserPayload {
  userDto: UserDto
}

"""
Create user request
"""
input CreateUserPayloadInput {
  """
  Email
  """
  email: String!

  """
  First name
  """
  firstName: String!

  """
  Last name
  """
  lastName: String!

  """
  Organization ID
  """
  organizationId: String
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

input DeleteUserInput {
  """
  User ID
  """
  userId: UUID!
}

type DeleteUserPayload {
  boolean: Boolean
}

type KeyValuePairOfOrganizationLevelAndListOfRoleDetailsDto {
  key: OrganizationLevel!
  value: [RoleDetailsDto!]!
}

"""
Languages
"""
type LanguageDto {
  """
  Language code
  """
  code: String!

  """
  EGW Language Code
  """
  egwCode: String

  """
  Language name
  """
  name: String!
}

type LanguageDtoCollectionSegment {
  items: [LanguageDto!]

  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

"""
Languages filter
"""
input LanguageFilterDtoInput {
  """
  ISO Language code
  """
  code: [String!]

  """
  EGW Language code
  """
  egwCode: String

  """
  Search query
  """
  query: String
}

"""
Language sorting enumeration
"""
enum LanguageSorting {
  """
  Language code
  """
  CODE

  """
  EGW Code
  """
  EGW_CODE

  """
  Language name
  """
  NAME
}

"""
Short organization details
"""
type OrganizationDto {
  """
  Child organization count
  """
  childCount: Int!
  children: [OrganizationDto!]

  """
  List of available languages
  """
  languages: [String!]!

  """
  Organization level
  """
  level: OrganizationLevel!

  """
  Organization name
  """
  name: String!

  """
  Division ID
  """
  organizationId: String!
  parent: OrganizationDto

  """
  Parent Id
  """
  parentId: String
}

type OrganizationDtoCollectionSegment {
  items: [OrganizationDto!]

  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

"""
Organization filters
"""
input OrganizationFilterDtoInput {
  """
  Division ID List
  """
  ids: [String!]

  """
  Division ID List
  """
  level: OrganizationLevel

  """
  Parents list
  """
  parents: [String!]

  """
  Search query
  """
  query: String
}

enum OrganizationLevel {
  CONFERENCE
  DIVISION
  GLOBAL
  UNION
}

enum OrganizationRole {
  ADMINISTRATOR
  CONFERENCE_SOP_COORDINATOR
  DIVISION_CHAIR
  DIVISION_LIAISON
  DIVISION_PUBLISHING_DIRECTOR
  DIVISION_SECRETARY
  DIVISION_SOP_COORDINATOR
  DIVISION_TREASURER
  GC_CHAIR
  GC_PUBLISHING_DIRECTOR
  GC_SECRETARY
  GC_TREASURER
  UNION_CHAIR
  UNION_PUBLISHING_DIRECTOR
  UNION_SECRETARY
  UNION_SOP_COORDINATOR
  UNION_TREASURER
  UNPRIVILEGED
}

"""
Approval
"""
type ProposalApprovalDto {
  """
  Approval ID
  """
  approvalId: UUID!
  approvedBy: UserDto

  """
  User, who made last change
  """
  approvedById: UUID!

  """
  Approval comment
  """
  comment: String

  """
  Date of creation
  """
  createdAt: DateTime!

  """
  Organization level
  """
  level: OrganizationLevel!

  """
  Approval status
  """
  status: ApprovalStatus!

  """
  Date of last modification
  """
  updatedAt: DateTime!
}

"""
Translation proposal
"""
type ProposalDto {
  approvals: [ProposalApprovalDto!]

  """
  Proposed code
  """
  code: String!

  """
  Date when proposal was created
  """
  createdAt: DateTime!

  """
  English book ID
  """
  englishBookId: Int!

  """
  Target language code
  """
  languageId: String!

  """
  Union ID
  """
  organizationId: String!

  """
  Proposal ID
  """
  proposalId: UUID!
  proposer: UserDto

  """
  Approval status
  """
  status: ApprovalStatus!

  """
  Proposed title
  """
  title: String!

  """
  Last modification date of proposal
  """
  updatedAt: DateTime!
}

type ProposalDtoCollectionSegment {
  items: [ProposalDto!]

  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

"""
Filtering of translation proposals
"""
input ProposalFilterDtoInput {
  """
  Division ID List
  """
  proposals: [UUID!]
}

"""
Publications ordering
"""
enum ProposalsSorting {
  """
  By code
  """
  CODE

  """
  By ID
  """
  ID

  """
  By language code
  """
  LANGUAGE_CODE

  """
  By language code
  """
  ORGANIZATION

  """
  By title
  """
  TITLE
}

"""
Publication model
"""
type PublicationDto {
  """
  Number of chapters
  """
  chapterCount: Int

  """
  Publication code
  """
  code: String!

  """
  Date of upload
  """
  createdAt: DateTime!

  """
  Publication ID
  """
  id: Int!
  language: LanguageDto!
  original: PublicationDto

  """
  Number of PAGES
  """
  pageCount: Int

  """
  Publication title
  """
  title: String!
  translations: [PublicationDto!]!

  """
  Date of last modification
  """
  updatedAt: DateTime!
}

type PublicationDtoCollectionSegment {
  items: [PublicationDto!]

  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

"""
Publication filter
"""
input PublicationFilterDtoInput {
  """
  Publication Code
  """
  code: String

  """
  Publication ID List
  """
  ids: [Int!]

  """
  Publication Language
  """
  language: String

  """
  Publication ID List
  """
  parents: [Int!]

  """
  Search query
  """
  query: String
}

"""
Publications ordering
"""
enum PublicationsSorting {
  """
  By code
  """
  CODE

  """
  By ID
  """
  ID

  """
  By language code
  """
  LANGUAGE_CODE

  """
  By title
  """
  TITLE
}

"""
Role details
"""
type RoleDetailsDto {
  """
  If role can be set/unset by current user
  """
  canBeSet: Boolean!

  """
  Role is enabled for a user
  """
  isEnabled: Boolean!

  """
  Role name
  """
  role: OrganizationRole!
}

input SetLanguageCodeInput {
  code: String!
  egwCode: String
}

type SetLanguageCodePayload {
  languageDto: LanguageDto
}

input SetUserStatusInput {
  """
  User is enabled
  """
  isEnabled: Boolean!

  """
  User ID
  """
  userId: UUID!
}

type SetUserStatusPayload {
  boolean: Boolean
}

input SortFieldOfCountryListSortingInput {
  field: CountryListSorting!
  order: SortOrder!
}

input SortFieldOfLanguageSortingInput {
  field: LanguageSorting!
  order: SortOrder!
}

input SortFieldOfProposalsSortingInput {
  field: ProposalsSorting!
  order: SortOrder!
}

input SortFieldOfPublicationsSortingInput {
  field: PublicationsSorting!
  order: SortOrder!
}

input SortFieldOfUserListSortingInput {
  field: UserListSorting!
  order: SortOrder!
}

"""
Sorting order
"""
enum SortOrder {
  """
  Ascending
  """
  ASC

  """
  Descending
  """
  DESC
}

"""
User-related mutations
"""
type TranslationDashboardMutations {
  """
  Sets language code
  """
  approveProposal(input: ApproveProposalInput!): ApproveProposalPayload!

  """
  Change user Email
  """
  changeUserEmail(input: ChangeUserEmailInput!): ChangeUserEmailPayload!

  """
  Change user name
  """
  changeUserName(input: ChangeUserNameInput!): ChangeUserNamePayload!

  """
  Change user organization
  """
  changeUserOrganization(input: ChangeUserOrganizationInput!): ChangeUserOrganizationPayload!

  """
  Clears user roles
  """
  clearUserRoles(input: ClearUserRolesInput!): ClearUserRolesPayload!

  """
  Create a new proposal
  """
  createProposal(input: CreateProposalInput!): CreateProposalPayload!

  """
  Create a new user
  """
  createUser(input: CreateUserInput!): CreateUserPayload!

  """
  Deletes user
  """
  deleteUser(input: DeleteUserInput!): DeleteUserPayload!

  """
  Sets language code
  """
  setLanguageCode(input: SetLanguageCodeInput!): SetLanguageCodePayload!

  """
  Deletes user
  """
  setUserStatus(input: SetUserStatusInput!): SetUserStatusPayload!

  """
  Adds roles to user
  """
  updateUserRoles(input: UpdateUserRolesInput!): UpdateUserRolesPayload!
}

"""
User-related queries
"""
type TranslationDashboardQueries {
  """
  List countries
  """
  countries(
    """
    Country filter
    """
    filter: CountryFilterDtoInput

    """
    Number of entries to skip
    """
    skip: Int

    """
    Ordering
    """
    sort: [SortFieldOfCountryListSortingInput!]

    """
    Number of entries to take
    """
    take: Int
  ): CountryDtoCollectionSegment

  """
  List countries
  """
  country(
    """
    Country code
    """
    code: String!
  ): CountryDto

  """
  List languages
  """
  language(
    """
    Language code
    """
    code: String!
  ): LanguageDto

  """
  List languages
  """
  languages(
    """
    Language filter
    """
    filter: LanguageFilterDtoInput

    """
    Number of entries to skip
    """
    skip: Int

    """
    Ordering
    """
    sort: [SortFieldOfLanguageSortingInput!]

    """
    Number of entries to skip
    """
    take: Int
  ): LanguageDtoCollectionSegment

  """
  List organizations
  """
  organization(
    """
    Organization Id
    """
    id: String!
  ): OrganizationDto

  """
  List organizations
  """
  organizations(
    """
    Organization filter filter
    """
    filter: OrganizationFilterDtoInput

    """
    Number of entries to skip
    """
    skip: Int

    """
    Number of entries to skip
    """
    take: Int
  ): OrganizationDtoCollectionSegment

  """
  Retrieves proposals for a user
  """
  proposal(
    """
    Proposal ID
    """
    id: UUID!
  ): ProposalDto

  """
  Retrieves proposals for a user
  """
  proposals(
    filter: ProposalFilterDtoInput
    skip: Int
    sort: [SortFieldOfProposalsSortingInput!]
    take: Int
  ): ProposalDtoCollectionSegment

  """
  List publications
  """
  publication(
    """
    Publication Id
    """
    id: Int!
  ): PublicationDto

  """
  List publications
  """
  publications(
    """
    Publication filter filter
    """
    filter: PublicationFilterDtoInput

    """
    Number of entries to skip
    """
    skip: Int

    """
    Ordering
    """
    sort: [SortFieldOfPublicationsSortingInput!]

    """
    Number of entries to skip
    """
    take: Int
  ): PublicationDtoCollectionSegment

  """
  List users
  """
  user(
    """
    User Id
    """
    id: UUID!
  ): UserDto

  """
  List users
  """
  users(
    """
    User filter filter
    """
    filter: UserFilterDtoInput

    """
    Number of entries to skip
    """
    skip: Int

    """
    Sorting
    """
    sort: [SortFieldOfUserListSortingInput!]

    """
    Number of entries to skip
    """
    take: Int
  ): UserDtoCollectionSegment
}

scalar UUID

"""
Update user email
"""
input UpdateUserEmailPayloadInput {
  """
  User email
  """
  email: String!
}

"""
Update user name
"""
input UpdateUserNamePayloadInput {
  """
  First name
  """
  firstName: String!

  """
  Last name
  """
  lastName: String!
}

"""
User organization request
"""
input UpdateUserOrganizationPayloadInput {
  """
  Division ID
  """
  organizationId: String
}

input UpdateUserRolesInput {
  """
  User roles payload
  """
  payload: AddUserRolesPayloadInput!

  """
  User ID
  """
  userId: UUID!
}

type UpdateUserRolesPayload {
  userDto: UserDto
}

"""
User transfer object
"""
type UserDto {
  """
  Date of creation
  """
  createdAt: DateTime!

  """
  Email
  """
  email: String!

  """
  First name
  """
  firstName: String!

  """
  Is enabled
  """
  isEnabled: Boolean!

  """
  Last name
  """
  lastName: String!

  """
  Division id
  """
  organizationId: String

  """
  List of assigned roles
  """
  roles(canBeSet: Boolean, isEnabled: Boolean): [KeyValuePairOfOrganizationLevelAndListOfRoleDetailsDto!]!

  """
  Date of last login
  """
  updatedAt: DateTime!

  """
  User id
  """
  userId: UUID!
}

type UserDtoCollectionSegment {
  items: [UserDto!]

  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

"""
User filter
"""
input UserFilterDtoInput {
  """
  User is enabled
  """
  enabled: Boolean

  """
  User Id List
  """
  ids: [UUID!]

  """
  Organization
  """
  organizations: [String!]

  """
  Search query
  """
  query: String

  """
  Filter user by role
  """
  role: OrganizationRole
}

"""
User pagination
"""
enum UserListSorting {
  """
  Email
  """
  EMAIL

  """
  First name
  """
  FIRST_NAME

  """
  Last name
  """
  LAST_NAME
}
